// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api.Models.Actor", b =>
                {
                    b.Property<int>("Actor_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Actor_id"));

                    b.Property<string>("Actor_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Actor_id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("api.Models.Director", b =>
                {
                    b.Property<int>("Director_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Director_id"));

                    b.Property<string>("Director_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Director_id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("api.Models.Genre", b =>
                {
                    b.Property<int>("Genre_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Genre_id"));

                    b.Property<string>("Genre_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Genre_id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("api.Models.Language", b =>
                {
                    b.Property<int>("Language_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Language_id"));

                    b.Property<string>("Language_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Language_id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("api.Models.Movie", b =>
                {
                    b.Property<int>("Movie_id")
                        .HasColumnType("integer");

                    b.Property<int>("Genre_id")
                        .HasColumnType("integer");

                    b.Property<int>("Director_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Release_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Movie_id", "Genre_id", "Director_id");

                    b.HasIndex("Director_id");

                    b.HasIndex("Genre_id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("api.Models.Movie_Actor", b =>
                {
                    b.Property<int>("Movie_id")
                        .HasColumnType("integer");

                    b.Property<int>("Actor_id")
                        .HasColumnType("integer");

                    b.Property<int>("Actor_id1")
                        .HasColumnType("integer");

                    b.Property<int>("MovieDirector_id")
                        .HasColumnType("integer");

                    b.Property<int>("MovieGenre_id")
                        .HasColumnType("integer");

                    b.Property<int>("Movie_id1")
                        .HasColumnType("integer");

                    b.HasKey("Movie_id", "Actor_id");

                    b.HasIndex("Actor_id1");

                    b.HasIndex("Movie_id1", "MovieGenre_id", "MovieDirector_id");

                    b.ToTable("Movie_Actors");
                });

            modelBuilder.Entity("api.Models.Movie_Language", b =>
                {
                    b.Property<int>("Movie_id")
                        .HasColumnType("integer");

                    b.Property<int>("Language_id")
                        .HasColumnType("integer");

                    b.Property<int>("Language_id1")
                        .HasColumnType("integer");

                    b.Property<int>("MovieDirector_id")
                        .HasColumnType("integer");

                    b.Property<int>("MovieGenre_id")
                        .HasColumnType("integer");

                    b.Property<int>("Movie_id1")
                        .HasColumnType("integer");

                    b.HasKey("Movie_id", "Language_id");

                    b.HasIndex("Language_id1");

                    b.HasIndex("Movie_id1", "MovieGenre_id", "MovieDirector_id");

                    b.ToTable("Movie_Languages");
                });

            modelBuilder.Entity("api.Models.Movie_Production_Company", b =>
                {
                    b.Property<int>("Company_id")
                        .HasColumnType("integer");

                    b.Property<int>("Movie_id")
                        .HasColumnType("integer");

                    b.Property<int>("Company_id1")
                        .HasColumnType("integer");

                    b.Property<int>("MovieDirector_id")
                        .HasColumnType("integer");

                    b.Property<int>("MovieGenre_id")
                        .HasColumnType("integer");

                    b.Property<int>("Movie_id1")
                        .HasColumnType("integer");

                    b.HasKey("Company_id", "Movie_id");

                    b.HasIndex("Company_id1");

                    b.HasIndex("Movie_id1", "MovieGenre_id", "MovieDirector_id");

                    b.ToTable("Movie_Production_Companies");
                });

            modelBuilder.Entity("api.Models.Production_Company", b =>
                {
                    b.Property<int>("Company_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Company_id"));

                    b.Property<string>("Company_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Company_id");

                    b.ToTable("Production_Companies");
                });

            modelBuilder.Entity("api.Models.Rating", b =>
                {
                    b.Property<int>("Movie_id")
                        .HasColumnType("integer");

                    b.Property<int>("User_id")
                        .HasColumnType("integer");

                    b.Property<int>("Rating_id")
                        .HasColumnType("integer");

                    b.Property<int>("MovieDirector_id")
                        .HasColumnType("integer");

                    b.Property<int>("MovieGenre_id")
                        .HasColumnType("integer");

                    b.Property<int>("Movie_id1")
                        .HasColumnType("integer");

                    b.Property<float>("Rating_value")
                        .HasColumnType("real");

                    b.Property<int>("User_id1")
                        .HasColumnType("integer");

                    b.HasKey("Movie_id", "User_id", "Rating_id");

                    b.HasIndex("User_id1");

                    b.HasIndex("Movie_id1", "MovieGenre_id", "MovieDirector_id");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("api.Models.Review", b =>
                {
                    b.Property<int>("Review_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Review_Id"));

                    b.Property<int>("MovieDirector_id")
                        .HasColumnType("integer");

                    b.Property<int>("MovieGenre_id")
                        .HasColumnType("integer");

                    b.Property<int>("Movie_id")
                        .HasColumnType("integer");

                    b.Property<int>("Movie_id1")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Review_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Review_text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("User_id")
                        .HasColumnType("integer");

                    b.Property<int>("User_id1")
                        .HasColumnType("integer");

                    b.HasKey("Review_Id");

                    b.HasIndex("User_id1");

                    b.HasIndex("Movie_id1", "MovieGenre_id", "MovieDirector_id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<int>("User_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("User_id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("User_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("api.Models.Movie", b =>
                {
                    b.HasOne("api.Models.Director", "Director")
                        .WithMany()
                        .HasForeignKey("Director_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("Genre_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("api.Models.Movie_Actor", b =>
                {
                    b.HasOne("api.Models.Actor", "Actor")
                        .WithMany()
                        .HasForeignKey("Actor_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("Movie_id1", "MovieGenre_id", "MovieDirector_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("api.Models.Movie_Language", b =>
                {
                    b.HasOne("api.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("Language_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("Movie_id1", "MovieGenre_id", "MovieDirector_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("api.Models.Movie_Production_Company", b =>
                {
                    b.HasOne("api.Models.Production_Company", "Company")
                        .WithMany()
                        .HasForeignKey("Company_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("Movie_id1", "MovieGenre_id", "MovieDirector_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("api.Models.Rating", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("Movie_id1", "MovieGenre_id", "MovieDirector_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Review", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("Movie_id1", "MovieGenre_id", "MovieDirector_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
